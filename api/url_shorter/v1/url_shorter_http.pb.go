// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.2
// source: url_shorter/v1/url_shorter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUrlShortenerServiceCreateShortUrl = "/url_shorter.v1.UrlShortenerService/CreateShortUrl"
const OperationUrlShortenerServiceGetRedirectURL = "/url_shorter.v1.UrlShortenerService/GetRedirectURL"

type UrlShortenerServiceHTTPServer interface {
	// CreateShortUrl CreateUrlShortener creates a new short URL based on the provided long URL, short key, and biz tag.
	CreateShortUrl(context.Context, *CreateUrlRequest) (*CreateUrlReply, error)
	// GetRedirectURL GetRedirectURL retrieves the long URL associated with the given short URL and returns it to the client.
	GetRedirectURL(context.Context, *JumpRequest) (*JumpReply, error)
}

func RegisterUrlShortenerServiceHTTPServer(s *http.Server, srv UrlShortenerServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/create/url", _UrlShortenerService_CreateShortUrl0_HTTP_Handler(srv))
	r.GET("/go/{url}", _UrlShortenerService_GetRedirectURL0_HTTP_Handler(srv))
}

func _UrlShortenerService_CreateShortUrl0_HTTP_Handler(srv UrlShortenerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUrlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUrlShortenerServiceCreateShortUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateShortUrl(ctx, req.(*CreateUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUrlReply)
		return ctx.Result(200, reply)
	}
}

func _UrlShortenerService_GetRedirectURL0_HTTP_Handler(srv UrlShortenerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JumpRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUrlShortenerServiceGetRedirectURL)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRedirectURL(ctx, req.(*JumpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JumpReply)
		return ctx.Result(200, reply)
	}
}

type UrlShortenerServiceHTTPClient interface {
	CreateShortUrl(ctx context.Context, req *CreateUrlRequest, opts ...http.CallOption) (rsp *CreateUrlReply, err error)
	GetRedirectURL(ctx context.Context, req *JumpRequest, opts ...http.CallOption) (rsp *JumpReply, err error)
}

type UrlShortenerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUrlShortenerServiceHTTPClient(client *http.Client) UrlShortenerServiceHTTPClient {
	return &UrlShortenerServiceHTTPClientImpl{client}
}

func (c *UrlShortenerServiceHTTPClientImpl) CreateShortUrl(ctx context.Context, in *CreateUrlRequest, opts ...http.CallOption) (*CreateUrlReply, error) {
	var out CreateUrlReply
	pattern := "/v1/create/url"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUrlShortenerServiceCreateShortUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UrlShortenerServiceHTTPClientImpl) GetRedirectURL(ctx context.Context, in *JumpRequest, opts ...http.CallOption) (*JumpReply, error) {
	var out JumpReply
	pattern := "/go/{url}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUrlShortenerServiceGetRedirectURL))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
