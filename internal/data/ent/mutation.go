// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/phpgao/durl_backend/internal/data/ent/predicate"
	"github.com/phpgao/durl_backend/internal/data/ent/tleaf"
	"github.com/phpgao/durl_backend/internal/data/ent/tshorturl"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTLeaf     = "TLeaf"
	TypeTShortUrl = "TShortUrl"
)

// TLeafMutation represents an operation that mutates the TLeaf nodes in the graph.
type TLeafMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	biz_tag       *string
	max_id        *int64
	addmax_id     *int64
	step          *int64
	addstep       *int64
	desc          *string
	version       *int32
	addversion    *int32
	created_at    *int64
	addcreated_at *int64
	updated_at    *int64
	addupdated_at *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TLeaf, error)
	predicates    []predicate.TLeaf
}

var _ ent.Mutation = (*TLeafMutation)(nil)

// tleafOption allows management of the mutation configuration using functional options.
type tleafOption func(*TLeafMutation)

// newTLeafMutation creates new mutation for the TLeaf entity.
func newTLeafMutation(c config, op Op, opts ...tleafOption) *TLeafMutation {
	m := &TLeafMutation{
		config:        c,
		op:            op,
		typ:           TypeTLeaf,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTLeafID sets the ID field of the mutation.
func withTLeafID(id int64) tleafOption {
	return func(m *TLeafMutation) {
		var (
			err   error
			once  sync.Once
			value *TLeaf
		)
		m.oldValue = func(ctx context.Context) (*TLeaf, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TLeaf.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTLeaf sets the old TLeaf of the mutation.
func withTLeaf(node *TLeaf) tleafOption {
	return func(m *TLeafMutation) {
		m.oldValue = func(context.Context) (*TLeaf, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TLeafMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TLeafMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TLeaf entities.
func (m *TLeafMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TLeafMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TLeafMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TLeaf.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBizTag sets the "biz_tag" field.
func (m *TLeafMutation) SetBizTag(s string) {
	m.biz_tag = &s
}

// BizTag returns the value of the "biz_tag" field in the mutation.
func (m *TLeafMutation) BizTag() (r string, exists bool) {
	v := m.biz_tag
	if v == nil {
		return
	}
	return *v, true
}

// OldBizTag returns the old "biz_tag" field's value of the TLeaf entity.
// If the TLeaf object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TLeafMutation) OldBizTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizTag: %w", err)
	}
	return oldValue.BizTag, nil
}

// ResetBizTag resets all changes to the "biz_tag" field.
func (m *TLeafMutation) ResetBizTag() {
	m.biz_tag = nil
}

// SetMaxID sets the "max_id" field.
func (m *TLeafMutation) SetMaxID(i int64) {
	m.max_id = &i
	m.addmax_id = nil
}

// MaxID returns the value of the "max_id" field in the mutation.
func (m *TLeafMutation) MaxID() (r int64, exists bool) {
	v := m.max_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxID returns the old "max_id" field's value of the TLeaf entity.
// If the TLeaf object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TLeafMutation) OldMaxID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxID: %w", err)
	}
	return oldValue.MaxID, nil
}

// AddMaxID adds i to the "max_id" field.
func (m *TLeafMutation) AddMaxID(i int64) {
	if m.addmax_id != nil {
		*m.addmax_id += i
	} else {
		m.addmax_id = &i
	}
}

// AddedMaxID returns the value that was added to the "max_id" field in this mutation.
func (m *TLeafMutation) AddedMaxID() (r int64, exists bool) {
	v := m.addmax_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxID resets all changes to the "max_id" field.
func (m *TLeafMutation) ResetMaxID() {
	m.max_id = nil
	m.addmax_id = nil
}

// SetStep sets the "step" field.
func (m *TLeafMutation) SetStep(i int64) {
	m.step = &i
	m.addstep = nil
}

// Step returns the value of the "step" field in the mutation.
func (m *TLeafMutation) Step() (r int64, exists bool) {
	v := m.step
	if v == nil {
		return
	}
	return *v, true
}

// OldStep returns the old "step" field's value of the TLeaf entity.
// If the TLeaf object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TLeafMutation) OldStep(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStep: %w", err)
	}
	return oldValue.Step, nil
}

// AddStep adds i to the "step" field.
func (m *TLeafMutation) AddStep(i int64) {
	if m.addstep != nil {
		*m.addstep += i
	} else {
		m.addstep = &i
	}
}

// AddedStep returns the value that was added to the "step" field in this mutation.
func (m *TLeafMutation) AddedStep() (r int64, exists bool) {
	v := m.addstep
	if v == nil {
		return
	}
	return *v, true
}

// ResetStep resets all changes to the "step" field.
func (m *TLeafMutation) ResetStep() {
	m.step = nil
	m.addstep = nil
}

// SetDesc sets the "desc" field.
func (m *TLeafMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *TLeafMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the TLeaf entity.
// If the TLeaf object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TLeafMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *TLeafMutation) ResetDesc() {
	m.desc = nil
}

// SetVersion sets the "version" field.
func (m *TLeafMutation) SetVersion(i int32) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *TLeafMutation) Version() (r int32, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the TLeaf entity.
// If the TLeaf object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TLeafMutation) OldVersion(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *TLeafMutation) AddVersion(i int32) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *TLeafMutation) AddedVersion() (r int32, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *TLeafMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TLeafMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TLeafMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TLeaf entity.
// If the TLeaf object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TLeafMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *TLeafMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TLeafMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TLeafMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TLeafMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TLeafMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TLeaf entity.
// If the TLeaf object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TLeafMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *TLeafMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TLeafMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TLeafMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// Where appends a list predicates to the TLeafMutation builder.
func (m *TLeafMutation) Where(ps ...predicate.TLeaf) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TLeafMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TLeafMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TLeaf, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TLeafMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TLeafMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TLeaf).
func (m *TLeafMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TLeafMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.biz_tag != nil {
		fields = append(fields, tleaf.FieldBizTag)
	}
	if m.max_id != nil {
		fields = append(fields, tleaf.FieldMaxID)
	}
	if m.step != nil {
		fields = append(fields, tleaf.FieldStep)
	}
	if m.desc != nil {
		fields = append(fields, tleaf.FieldDesc)
	}
	if m.version != nil {
		fields = append(fields, tleaf.FieldVersion)
	}
	if m.created_at != nil {
		fields = append(fields, tleaf.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tleaf.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TLeafMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tleaf.FieldBizTag:
		return m.BizTag()
	case tleaf.FieldMaxID:
		return m.MaxID()
	case tleaf.FieldStep:
		return m.Step()
	case tleaf.FieldDesc:
		return m.Desc()
	case tleaf.FieldVersion:
		return m.Version()
	case tleaf.FieldCreatedAt:
		return m.CreatedAt()
	case tleaf.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TLeafMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tleaf.FieldBizTag:
		return m.OldBizTag(ctx)
	case tleaf.FieldMaxID:
		return m.OldMaxID(ctx)
	case tleaf.FieldStep:
		return m.OldStep(ctx)
	case tleaf.FieldDesc:
		return m.OldDesc(ctx)
	case tleaf.FieldVersion:
		return m.OldVersion(ctx)
	case tleaf.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tleaf.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TLeaf field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TLeafMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tleaf.FieldBizTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizTag(v)
		return nil
	case tleaf.FieldMaxID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxID(v)
		return nil
	case tleaf.FieldStep:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStep(v)
		return nil
	case tleaf.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case tleaf.FieldVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case tleaf.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tleaf.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TLeaf field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TLeafMutation) AddedFields() []string {
	var fields []string
	if m.addmax_id != nil {
		fields = append(fields, tleaf.FieldMaxID)
	}
	if m.addstep != nil {
		fields = append(fields, tleaf.FieldStep)
	}
	if m.addversion != nil {
		fields = append(fields, tleaf.FieldVersion)
	}
	if m.addcreated_at != nil {
		fields = append(fields, tleaf.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, tleaf.FieldUpdatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TLeafMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tleaf.FieldMaxID:
		return m.AddedMaxID()
	case tleaf.FieldStep:
		return m.AddedStep()
	case tleaf.FieldVersion:
		return m.AddedVersion()
	case tleaf.FieldCreatedAt:
		return m.AddedCreatedAt()
	case tleaf.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TLeafMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tleaf.FieldMaxID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxID(v)
		return nil
	case tleaf.FieldStep:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStep(v)
		return nil
	case tleaf.FieldVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	case tleaf.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case tleaf.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TLeaf numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TLeafMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TLeafMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TLeafMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TLeaf nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TLeafMutation) ResetField(name string) error {
	switch name {
	case tleaf.FieldBizTag:
		m.ResetBizTag()
		return nil
	case tleaf.FieldMaxID:
		m.ResetMaxID()
		return nil
	case tleaf.FieldStep:
		m.ResetStep()
		return nil
	case tleaf.FieldDesc:
		m.ResetDesc()
		return nil
	case tleaf.FieldVersion:
		m.ResetVersion()
		return nil
	case tleaf.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tleaf.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TLeaf field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TLeafMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TLeafMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TLeafMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TLeafMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TLeafMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TLeafMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TLeafMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TLeaf unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TLeafMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TLeaf edge %s", name)
}

// TShortUrlMutation represents an operation that mutates the TShortUrl nodes in the graph.
type TShortUrlMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	biz_id        *int64
	addbiz_id     *int64
	origin        *string
	short         *int64
	addshort      *int64
	visit         *int64
	addvisit      *int64
	created_at    *int64
	addcreated_at *int64
	updated_at    *int64
	addupdated_at *int64
	expired_at    *int64
	addexpired_at *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TShortUrl, error)
	predicates    []predicate.TShortUrl
}

var _ ent.Mutation = (*TShortUrlMutation)(nil)

// tshorturlOption allows management of the mutation configuration using functional options.
type tshorturlOption func(*TShortUrlMutation)

// newTShortUrlMutation creates new mutation for the TShortUrl entity.
func newTShortUrlMutation(c config, op Op, opts ...tshorturlOption) *TShortUrlMutation {
	m := &TShortUrlMutation{
		config:        c,
		op:            op,
		typ:           TypeTShortUrl,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTShortUrlID sets the ID field of the mutation.
func withTShortUrlID(id int64) tshorturlOption {
	return func(m *TShortUrlMutation) {
		var (
			err   error
			once  sync.Once
			value *TShortUrl
		)
		m.oldValue = func(ctx context.Context) (*TShortUrl, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TShortUrl.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTShortUrl sets the old TShortUrl of the mutation.
func withTShortUrl(node *TShortUrl) tshorturlOption {
	return func(m *TShortUrlMutation) {
		m.oldValue = func(context.Context) (*TShortUrl, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TShortUrlMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TShortUrlMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TShortUrl entities.
func (m *TShortUrlMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TShortUrlMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TShortUrlMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TShortUrl.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBizID sets the "biz_id" field.
func (m *TShortUrlMutation) SetBizID(i int64) {
	m.biz_id = &i
	m.addbiz_id = nil
}

// BizID returns the value of the "biz_id" field in the mutation.
func (m *TShortUrlMutation) BizID() (r int64, exists bool) {
	v := m.biz_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBizID returns the old "biz_id" field's value of the TShortUrl entity.
// If the TShortUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TShortUrlMutation) OldBizID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizID: %w", err)
	}
	return oldValue.BizID, nil
}

// AddBizID adds i to the "biz_id" field.
func (m *TShortUrlMutation) AddBizID(i int64) {
	if m.addbiz_id != nil {
		*m.addbiz_id += i
	} else {
		m.addbiz_id = &i
	}
}

// AddedBizID returns the value that was added to the "biz_id" field in this mutation.
func (m *TShortUrlMutation) AddedBizID() (r int64, exists bool) {
	v := m.addbiz_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetBizID resets all changes to the "biz_id" field.
func (m *TShortUrlMutation) ResetBizID() {
	m.biz_id = nil
	m.addbiz_id = nil
}

// SetOrigin sets the "origin" field.
func (m *TShortUrlMutation) SetOrigin(s string) {
	m.origin = &s
}

// Origin returns the value of the "origin" field in the mutation.
func (m *TShortUrlMutation) Origin() (r string, exists bool) {
	v := m.origin
	if v == nil {
		return
	}
	return *v, true
}

// OldOrigin returns the old "origin" field's value of the TShortUrl entity.
// If the TShortUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TShortUrlMutation) OldOrigin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrigin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrigin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrigin: %w", err)
	}
	return oldValue.Origin, nil
}

// ResetOrigin resets all changes to the "origin" field.
func (m *TShortUrlMutation) ResetOrigin() {
	m.origin = nil
}

// SetShort sets the "short" field.
func (m *TShortUrlMutation) SetShort(i int64) {
	m.short = &i
	m.addshort = nil
}

// Short returns the value of the "short" field in the mutation.
func (m *TShortUrlMutation) Short() (r int64, exists bool) {
	v := m.short
	if v == nil {
		return
	}
	return *v, true
}

// OldShort returns the old "short" field's value of the TShortUrl entity.
// If the TShortUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TShortUrlMutation) OldShort(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShort: %w", err)
	}
	return oldValue.Short, nil
}

// AddShort adds i to the "short" field.
func (m *TShortUrlMutation) AddShort(i int64) {
	if m.addshort != nil {
		*m.addshort += i
	} else {
		m.addshort = &i
	}
}

// AddedShort returns the value that was added to the "short" field in this mutation.
func (m *TShortUrlMutation) AddedShort() (r int64, exists bool) {
	v := m.addshort
	if v == nil {
		return
	}
	return *v, true
}

// ResetShort resets all changes to the "short" field.
func (m *TShortUrlMutation) ResetShort() {
	m.short = nil
	m.addshort = nil
}

// SetVisit sets the "visit" field.
func (m *TShortUrlMutation) SetVisit(i int64) {
	m.visit = &i
	m.addvisit = nil
}

// Visit returns the value of the "visit" field in the mutation.
func (m *TShortUrlMutation) Visit() (r int64, exists bool) {
	v := m.visit
	if v == nil {
		return
	}
	return *v, true
}

// OldVisit returns the old "visit" field's value of the TShortUrl entity.
// If the TShortUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TShortUrlMutation) OldVisit(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisit: %w", err)
	}
	return oldValue.Visit, nil
}

// AddVisit adds i to the "visit" field.
func (m *TShortUrlMutation) AddVisit(i int64) {
	if m.addvisit != nil {
		*m.addvisit += i
	} else {
		m.addvisit = &i
	}
}

// AddedVisit returns the value that was added to the "visit" field in this mutation.
func (m *TShortUrlMutation) AddedVisit() (r int64, exists bool) {
	v := m.addvisit
	if v == nil {
		return
	}
	return *v, true
}

// ResetVisit resets all changes to the "visit" field.
func (m *TShortUrlMutation) ResetVisit() {
	m.visit = nil
	m.addvisit = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TShortUrlMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TShortUrlMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TShortUrl entity.
// If the TShortUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TShortUrlMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *TShortUrlMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TShortUrlMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TShortUrlMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TShortUrlMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TShortUrlMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TShortUrl entity.
// If the TShortUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TShortUrlMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *TShortUrlMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TShortUrlMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TShortUrlMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetExpiredAt sets the "expired_at" field.
func (m *TShortUrlMutation) SetExpiredAt(i int64) {
	m.expired_at = &i
	m.addexpired_at = nil
}

// ExpiredAt returns the value of the "expired_at" field in the mutation.
func (m *TShortUrlMutation) ExpiredAt() (r int64, exists bool) {
	v := m.expired_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiredAt returns the old "expired_at" field's value of the TShortUrl entity.
// If the TShortUrl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TShortUrlMutation) OldExpiredAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiredAt: %w", err)
	}
	return oldValue.ExpiredAt, nil
}

// AddExpiredAt adds i to the "expired_at" field.
func (m *TShortUrlMutation) AddExpiredAt(i int64) {
	if m.addexpired_at != nil {
		*m.addexpired_at += i
	} else {
		m.addexpired_at = &i
	}
}

// AddedExpiredAt returns the value that was added to the "expired_at" field in this mutation.
func (m *TShortUrlMutation) AddedExpiredAt() (r int64, exists bool) {
	v := m.addexpired_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiredAt resets all changes to the "expired_at" field.
func (m *TShortUrlMutation) ResetExpiredAt() {
	m.expired_at = nil
	m.addexpired_at = nil
}

// Where appends a list predicates to the TShortUrlMutation builder.
func (m *TShortUrlMutation) Where(ps ...predicate.TShortUrl) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TShortUrlMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TShortUrlMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TShortUrl, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TShortUrlMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TShortUrlMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TShortUrl).
func (m *TShortUrlMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TShortUrlMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.biz_id != nil {
		fields = append(fields, tshorturl.FieldBizID)
	}
	if m.origin != nil {
		fields = append(fields, tshorturl.FieldOrigin)
	}
	if m.short != nil {
		fields = append(fields, tshorturl.FieldShort)
	}
	if m.visit != nil {
		fields = append(fields, tshorturl.FieldVisit)
	}
	if m.created_at != nil {
		fields = append(fields, tshorturl.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tshorturl.FieldUpdatedAt)
	}
	if m.expired_at != nil {
		fields = append(fields, tshorturl.FieldExpiredAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TShortUrlMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tshorturl.FieldBizID:
		return m.BizID()
	case tshorturl.FieldOrigin:
		return m.Origin()
	case tshorturl.FieldShort:
		return m.Short()
	case tshorturl.FieldVisit:
		return m.Visit()
	case tshorturl.FieldCreatedAt:
		return m.CreatedAt()
	case tshorturl.FieldUpdatedAt:
		return m.UpdatedAt()
	case tshorturl.FieldExpiredAt:
		return m.ExpiredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TShortUrlMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tshorturl.FieldBizID:
		return m.OldBizID(ctx)
	case tshorturl.FieldOrigin:
		return m.OldOrigin(ctx)
	case tshorturl.FieldShort:
		return m.OldShort(ctx)
	case tshorturl.FieldVisit:
		return m.OldVisit(ctx)
	case tshorturl.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tshorturl.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case tshorturl.FieldExpiredAt:
		return m.OldExpiredAt(ctx)
	}
	return nil, fmt.Errorf("unknown TShortUrl field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TShortUrlMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tshorturl.FieldBizID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizID(v)
		return nil
	case tshorturl.FieldOrigin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrigin(v)
		return nil
	case tshorturl.FieldShort:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShort(v)
		return nil
	case tshorturl.FieldVisit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisit(v)
		return nil
	case tshorturl.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tshorturl.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case tshorturl.FieldExpiredAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiredAt(v)
		return nil
	}
	return fmt.Errorf("unknown TShortUrl field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TShortUrlMutation) AddedFields() []string {
	var fields []string
	if m.addbiz_id != nil {
		fields = append(fields, tshorturl.FieldBizID)
	}
	if m.addshort != nil {
		fields = append(fields, tshorturl.FieldShort)
	}
	if m.addvisit != nil {
		fields = append(fields, tshorturl.FieldVisit)
	}
	if m.addcreated_at != nil {
		fields = append(fields, tshorturl.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, tshorturl.FieldUpdatedAt)
	}
	if m.addexpired_at != nil {
		fields = append(fields, tshorturl.FieldExpiredAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TShortUrlMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tshorturl.FieldBizID:
		return m.AddedBizID()
	case tshorturl.FieldShort:
		return m.AddedShort()
	case tshorturl.FieldVisit:
		return m.AddedVisit()
	case tshorturl.FieldCreatedAt:
		return m.AddedCreatedAt()
	case tshorturl.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case tshorturl.FieldExpiredAt:
		return m.AddedExpiredAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TShortUrlMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tshorturl.FieldBizID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBizID(v)
		return nil
	case tshorturl.FieldShort:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShort(v)
		return nil
	case tshorturl.FieldVisit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVisit(v)
		return nil
	case tshorturl.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case tshorturl.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case tshorturl.FieldExpiredAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiredAt(v)
		return nil
	}
	return fmt.Errorf("unknown TShortUrl numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TShortUrlMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TShortUrlMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TShortUrlMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TShortUrl nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TShortUrlMutation) ResetField(name string) error {
	switch name {
	case tshorturl.FieldBizID:
		m.ResetBizID()
		return nil
	case tshorturl.FieldOrigin:
		m.ResetOrigin()
		return nil
	case tshorturl.FieldShort:
		m.ResetShort()
		return nil
	case tshorturl.FieldVisit:
		m.ResetVisit()
		return nil
	case tshorturl.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tshorturl.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case tshorturl.FieldExpiredAt:
		m.ResetExpiredAt()
		return nil
	}
	return fmt.Errorf("unknown TShortUrl field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TShortUrlMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TShortUrlMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TShortUrlMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TShortUrlMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TShortUrlMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TShortUrlMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TShortUrlMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TShortUrl unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TShortUrlMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TShortUrl edge %s", name)
}
