// Code generated by ent, DO NOT EDIT.

package tleaf

import (
	"entgo.io/ent/dialect/sql"
	"github.com/phpgao/durl_backend/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldID, id))
}

// BizTag applies equality check predicate on the "biz_tag" field. It's identical to BizTagEQ.
func BizTag(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldBizTag, v))
}

// MaxID applies equality check predicate on the "max_id" field. It's identical to MaxIDEQ.
func MaxID(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldMaxID, v))
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldStep, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldDesc, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldVersion, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldUpdatedAt, v))
}

// BizTagEQ applies the EQ predicate on the "biz_tag" field.
func BizTagEQ(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldBizTag, v))
}

// BizTagNEQ applies the NEQ predicate on the "biz_tag" field.
func BizTagNEQ(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldBizTag, v))
}

// BizTagIn applies the In predicate on the "biz_tag" field.
func BizTagIn(vs ...string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldBizTag, vs...))
}

// BizTagNotIn applies the NotIn predicate on the "biz_tag" field.
func BizTagNotIn(vs ...string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldBizTag, vs...))
}

// BizTagGT applies the GT predicate on the "biz_tag" field.
func BizTagGT(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldBizTag, v))
}

// BizTagGTE applies the GTE predicate on the "biz_tag" field.
func BizTagGTE(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldBizTag, v))
}

// BizTagLT applies the LT predicate on the "biz_tag" field.
func BizTagLT(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldBizTag, v))
}

// BizTagLTE applies the LTE predicate on the "biz_tag" field.
func BizTagLTE(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldBizTag, v))
}

// BizTagContains applies the Contains predicate on the "biz_tag" field.
func BizTagContains(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldContains(FieldBizTag, v))
}

// BizTagHasPrefix applies the HasPrefix predicate on the "biz_tag" field.
func BizTagHasPrefix(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldHasPrefix(FieldBizTag, v))
}

// BizTagHasSuffix applies the HasSuffix predicate on the "biz_tag" field.
func BizTagHasSuffix(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldHasSuffix(FieldBizTag, v))
}

// BizTagEqualFold applies the EqualFold predicate on the "biz_tag" field.
func BizTagEqualFold(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEqualFold(FieldBizTag, v))
}

// BizTagContainsFold applies the ContainsFold predicate on the "biz_tag" field.
func BizTagContainsFold(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldContainsFold(FieldBizTag, v))
}

// MaxIDEQ applies the EQ predicate on the "max_id" field.
func MaxIDEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldMaxID, v))
}

// MaxIDNEQ applies the NEQ predicate on the "max_id" field.
func MaxIDNEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldMaxID, v))
}

// MaxIDIn applies the In predicate on the "max_id" field.
func MaxIDIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldMaxID, vs...))
}

// MaxIDNotIn applies the NotIn predicate on the "max_id" field.
func MaxIDNotIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldMaxID, vs...))
}

// MaxIDGT applies the GT predicate on the "max_id" field.
func MaxIDGT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldMaxID, v))
}

// MaxIDGTE applies the GTE predicate on the "max_id" field.
func MaxIDGTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldMaxID, v))
}

// MaxIDLT applies the LT predicate on the "max_id" field.
func MaxIDLT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldMaxID, v))
}

// MaxIDLTE applies the LTE predicate on the "max_id" field.
func MaxIDLTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldMaxID, v))
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldStep, v))
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldStep, v))
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldStep, vs...))
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldStep, vs...))
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldStep, v))
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldStep, v))
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldStep, v))
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldStep, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldHasSuffix(FieldDesc, v))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldContainsFold(FieldDesc, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int32) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.TLeaf {
	return predicate.TLeaf(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TLeaf) predicate.TLeaf {
	return predicate.TLeaf(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TLeaf) predicate.TLeaf {
	return predicate.TLeaf(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TLeaf) predicate.TLeaf {
	return predicate.TLeaf(sql.NotPredicates(p))
}
