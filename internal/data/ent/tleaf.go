// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/phpgao/durl_backend/internal/data/ent/tleaf"
)

// TLeaf is the model entity for the TLeaf schema.
type TLeaf struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// for different biz
	BizTag string `json:"biz_tag,omitempty"`
	// current max id
	MaxID int64 `json:"max_id,omitempty"`
	// nums per batch
	Step int64 `json:"step,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// version control
	Version int32 `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TLeaf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tleaf.FieldID, tleaf.FieldMaxID, tleaf.FieldStep, tleaf.FieldVersion, tleaf.FieldCreatedAt, tleaf.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case tleaf.FieldBizTag, tleaf.FieldDesc:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TLeaf fields.
func (t *TLeaf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tleaf.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case tleaf.FieldBizTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biz_tag", values[i])
			} else if value.Valid {
				t.BizTag = value.String
			}
		case tleaf.FieldMaxID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_id", values[i])
			} else if value.Valid {
				t.MaxID = value.Int64
			}
		case tleaf.FieldStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				t.Step = value.Int64
			}
		case tleaf.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				t.Desc = value.String
			}
		case tleaf.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				t.Version = int32(value.Int64)
			}
		case tleaf.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Int64
			}
		case tleaf.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Int64
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TLeaf.
// This includes values selected through modifiers, order, etc.
func (t *TLeaf) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this TLeaf.
// Note that you need to call TLeaf.Unwrap() before calling this method if this TLeaf
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TLeaf) Update() *TLeafUpdateOne {
	return NewTLeafClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the TLeaf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TLeaf) Unwrap() *TLeaf {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: TLeaf is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TLeaf) String() string {
	var builder strings.Builder
	builder.WriteString("TLeaf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("biz_tag=")
	builder.WriteString(t.BizTag)
	builder.WriteString(", ")
	builder.WriteString("max_id=")
	builder.WriteString(fmt.Sprintf("%v", t.MaxID))
	builder.WriteString(", ")
	builder.WriteString("step=")
	builder.WriteString(fmt.Sprintf("%v", t.Step))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(t.Desc)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", t.Version))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// TLeafs is a parsable slice of TLeaf.
type TLeafs []*TLeaf
